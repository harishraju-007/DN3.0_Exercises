Exercise 1: Control Structures

Scenario 1: The bank wants to apply a discount to loan interest rates for customers above 60 years old.
Question: Write a PL/SQL block that loops through all customers, checks their age, and if they are above 60, apply a 1% discount to their current loan interest rates.


Apply a 1% Discount to Loan Interest Rates for Customers Above 60 Years Old

DECLARE
    CURSOR customer_cursor IS
        SELECT customer_id, age, loan_interest_rate
        FROM customers
        WHERE age > 60;
    
    customer_rec customer_cursor%ROWTYPE;
BEGIN
    OPEN customer_cursor;
    
    LOOP
        FETCH customer_cursor INTO customer_rec;
        EXIT WHEN customer_cursor%NOTFOUND;
        
        UPDATE customers
        SET loan_interest_rate = loan_interest_rate - (loan_interest_rate * 0.01)
        WHERE customer_id = customer_rec.customer_id;
    END LOOP;
    
    CLOSE customer_cursor;
    
    COMMIT;
END;
/

Scenario 2: A customer can be promoted to VIP status based on their balance.
Question: Write a PL/SQL block that iterates through all customers and sets a flag IsVIP to TRUE for those with a balance over $10,000.


Set IsVIP to TRUE for Customers with Balance Over $10,000

DECLARE
    CURSOR customer_cursor IS
        SELECT customer_id, balance
        FROM customers
        WHERE balance > 10000;
    
    customer_rec customer_cursor%ROWTYPE;
BEGIN
    OPEN customer_cursor;
    
    LOOP
        FETCH customer_cursor INTO customer_rec;
        EXIT WHEN customer_cursor%NOTFOUND;
        
        UPDATE customers
        SET IsVIP = TRUE
        WHERE customer_id = customer_rec.customer_id;
    END LOOP;
    
    CLOSE customer_cursor;
    
    COMMIT;
END;
/

Scenario 3: The bank wants to send reminders to customers whose loans are due within the next 30 days.
Question: Write a PL/SQL block that fetches all loans due in the next 30 days and prints a reminder message for each customer.


Send Reminders to Customers Whose Loans are Due Within the Next 30 Days

DECLARE
    CURSOR loan_cursor IS
        SELECT customer_id, loan_id, due_date
        FROM loans
        WHERE due_date BETWEEN SYSDATE AND SYSDATE + 30;
    
    loan_rec loan_cursor%ROWTYPE;
BEGIN
    OPEN loan_cursor;
    
    LOOP
        FETCH loan_cursor INTO loan_rec;
        EXIT WHEN loan_cursor%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE('Reminder: Customer ID ' || loan_rec.customer_id || 
                             ', your loan (ID: ' || loan_rec.loan_id || 
                             ') is due on ' || TO_CHAR(loan_rec.due_date, 'DD-MON-YYYY') || '.');
    END LOOP;
    
    CLOSE loan_cursor;
END;
/

________________________________________________________________________________________________________________________________________________


Exercise 2: Error Handling

Scenario 1: Handle exceptions during fund transfers between accounts.
Question: Write a stored procedure SafeTransferFunds that transfers funds between two accounts. Ensure that if any error occurs (e.g., insufficient funds), an appropriate error message is logged and the transaction is rolled back.



SafeTransferFunds

CREATE OR REPLACE PROCEDURE SafeTransferFunds(
    p_from_account_id IN NUMBER,
    p_to_account_id IN NUMBER,
    p_amount IN NUMBER
) IS
    insufficient_funds EXCEPTION;
    PRAGMA EXCEPTION_INIT(insufficient_funds, -20101);
BEGIN
    -- Check if the from account has sufficient funds
    DECLARE
        v_balance NUMBER;
    BEGIN
        SELECT balance INTO v_balance
        FROM accounts
        WHERE account_id = p_from_account_id
        FOR UPDATE;

        IF v_balance < p_amount THEN
            RAISE insufficient_funds;
        END IF;

        -- Deduct from the from account
        UPDATE accounts
        SET balance = balance - p_amount
        WHERE account_id = p_from_account_id;

        -- Add to the to account
        UPDATE accounts
        SET balance = balance + p_amount
        WHERE account_id = p_to_account_id;

        COMMIT;
    EXCEPTION
        WHEN insufficient_funds THEN
            ROLLBACK;
            INSERT INTO error_log (error_message, error_date)
            VALUES ('Insufficient funds in account ' || p_from_account_id, SYSDATE);
            RAISE_APPLICATION_ERROR(-20101, 'Insufficient funds in the source account.');
        WHEN OTHERS THEN
            ROLLBACK;
            INSERT INTO error_log (error_message, error_date)
            VALUES (SQLERRM, SYSDATE);
            RAISE;
    END;
END SafeTransferFunds;
/


Scenario 2: Manage errors when updating employee salaries.
Question: Write a stored procedure UpdateSalary that increases the salary of an employee by a given percentage. If the employee ID does not exist, handle the exception and log an error message.


UpdateSalary

CREATE OR REPLACE PROCEDURE UpdateSalary(
    p_employee_id IN NUMBER,
    p_percentage IN NUMBER
) IS
    employee_not_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(employee_not_found, -20001);
BEGIN
    DECLARE
        v_current_salary NUMBER;
    BEGIN
        SELECT salary INTO v_current_salary
        FROM employees
        WHERE employee_id = p_employee_id
        FOR UPDATE;

        -- Increase the salary by the given percentage
        UPDATE employees
        SET salary = salary * (1 + p_percentage / 100)
        WHERE employee_id = p_employee_id;

        COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ROLLBACK;
            INSERT INTO error_log (error_message, error_date)
            VALUES ('Employee ID ' || p_employee_id || ' not found', SYSDATE);
            RAISE_APPLICATION_ERROR(-20001, 'Employee ID not found.');
        WHEN OTHERS THEN
            ROLLBACK;
            INSERT INTO error_log (error_message, error_date)
            VALUES (SQLERRM, SYSDATE);
            RAISE;
    END;
END UpdateSalary;
/


Scenario 3: Ensure data integrity when adding a new customer.
Question: Write a stored procedure AddNewCustomer that inserts a new customer into the Customers table. If a customer with the same ID already exists, handle the exception by logging an error and preventing the insertion.


AddNewCustomer
CREATE OR REPLACE PROCEDURE AddNewCustomer(
    p_customer_id IN NUMBER,
    p_customer_name IN VARCHAR2,
    p_customer_age IN NUMBER,
    p_customer_balance IN NUMBER
) IS
    customer_exists EXCEPTION;
    PRAGMA EXCEPTION_INIT(customer_exists, -20002);
BEGIN
    -- Attempt to insert the new customer
    BEGIN
        INSERT INTO customers (customer_id, name, age, balance)
        VALUES (p_customer_id, p_customer_name, p_customer_age, p_customer_balance);

        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            INSERT INTO error_log (error_message, error_date)
            VALUES ('Customer ID ' || p_customer_id || ' already exists', SYSDATE);
            RAISE_APPLICATION_ERROR(-20002, 'Customer with the same ID already exists.');
        WHEN OTHERS THEN
            ROLLBACK;
            INSERT INTO error_log (error_message, error_date)
            VALUES (SQLERRM, SYSDATE);
            RAISE;
    END;
END AddNewCustomer;
/

________________________________________________________________________________________________________________________________________________

Exercise 3: Stored Procedures


Scenario 1: The bank needs to process monthly interest for all savings accounts.
Question: Write a stored procedure ProcessMonthlyInterest that calculates and updates the balance of all savings accounts by applying an interest rate of 1% to the current balance.


Process Monthly Interest

CREATE PROCEDURE ProcessMonthlyInterest()
BEGIN
    -- Update the balance of all savings accounts by applying 1% interest
    UPDATE savings_accounts
    SET balance = balance * 1.01;
END;


Scenario 2: The bank wants to implement a bonus scheme for employees based on their performance.
Question: Write a stored procedure UpdateEmployeeBonus that updates the salary of employees in a given department by adding a bonus percentage passed as a parameter.


Update Employee Bonus

CREATE PROCEDURE UpdateEmployeeBonus(IN department_id INT, IN bonus_percentage DECIMAL(5, 2))
BEGIN
    -- Update the salary of employees in a given department by adding the bonus percentage
    UPDATE employees
    SET salary = salary + (salary * (bonus_percentage / 100))
    WHERE department_id = department_id;
END;


Scenario 3: Customers should be able to transfer funds between their accounts.
Question: Write a stored procedure TransferFunds that transfers a specified amount from one account to another, checking that the source account has sufficient balance before making the transfer.

Transfer Funds

CREATE PROCEDURE TransferFunds(IN from_account_id INT, IN to_account_id INT, IN amount DECIMAL(10, 2))
BEGIN
    DECLARE insufficient_funds CONDITION FOR SQLSTATE '45000';
    
    -- Check if the source account has sufficient balance
    IF (SELECT balance FROM accounts WHERE account_id = from_account_id) < amount THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Insufficient funds';
    ELSE
        -- Deduct the amount from the source account
        UPDATE accounts
        SET balance = balance - amount
        WHERE account_id = from_account_id;

        -- Add the amount to the destination account
        UPDATE accounts
        SET balance = balance + amount
        WHERE account_id = to_account_id;
    END IF;
END;

________________________________________________________________________________________________________________________________________________


Exercise 4: Functions


Scenario 1: Calculate the age of customers for eligibility checks.
Question: Write a function CalculateAge that takes a customer's date of birth as input and returns their age in years.


Calculate Age

CREATE FUNCTION CalculateAge(dob DATE) RETURNS INT
BEGIN
    DECLARE age INT;
    SET age = TIMESTAMPDIFF(YEAR, dob, CURDATE());
    RETURN age;
END;



Scenario 2: Maintain an audit log for all transactions.
Question: Write a trigger LogTransaction that inserts a record into an AuditLog table whenever a transaction is inserted into the Transactions table.

Calculate Monthly Installment

CREATE FUNCTION CalculateMonthlyInstallment(loan_amount DECIMAL(10, 2), interest_rate DECIMAL(5, 2), loan_duration_years INT) RETURNS DECIMAL(10, 2)
BEGIN
    DECLARE monthly_interest_rate DECIMAL(5, 4);
    DECLARE number_of_payments INT;
    DECLARE monthly_installment DECIMAL(10, 2);

    SET monthly_interest_rate = interest_rate / 100 / 12;
    SET number_of_payments = loan_duration_years * 12;

    SET monthly_installment = loan_amount * monthly_interest_rate / (1 - POWER(1 + monthly_interest_rate, -number_of_payments));

    RETURN monthly_installment;
END;

Scenario 3: Enforce business rules on deposits and withdrawals.
Question: Write a trigger CheckTransactionRules that ensures withdrawals do not exceed the balance and deposits are positive before inserting a record into the Transactions table.

Has Sufficient Balance

CREATE FUNCTION HasSufficientBalance(account_id INT, amount DECIMAL(10, 2)) RETURNS BOOLEAN
BEGIN
    DECLARE current_balance DECIMAL(10, 2);

    SELECT balance INTO current_balance
    FROM accounts
    WHERE account_id = account_id;

    RETURN current_balance >= amount;
END;

________________________________________________________________________________________________________________________________________________


Exercise 5: Triggers

Scenario 1: Automatically update the last modified date when a customer's record is updated.
Question: Write a trigger UpdateCustomerLastModified that updates the LastModified column of the Customers table to the current date whenever a customer's record is updated.

Update Customer Last Modified

CREATE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
    SET NEW.LastModified = NOW();
END;

Scenario 2: Maintain an audit log for all transactions.
Question: Write a trigger LogTransaction that inserts a record into an AuditLog table whenever a transaction is inserted into the Transactions table.

Log Transaction

CREATE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
    INSERT INTO AuditLog (TransactionID, AccountID, Amount, TransactionDate, ActionType)
    VALUES (NEW.TransactionID, NEW.AccountID, NEW.Amount, NEW.TransactionDate, 'INSERT');
END;


Scenario 3: Enforce business rules on deposits and withdrawals.
o	Question: Write a trigger CheckTransactionRules that ensures withdrawals do not exceed the balance and deposits are positive before inserting a record into the Transactions table.

Check Transaction Rules

CREATE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
BEGIN
    DECLARE current_balance DECIMAL(10, 2);

    -- Check if the transaction is a withdrawal
    IF NEW.Amount < 0 THEN
        -- Get the current balance of the account
        SELECT balance INTO current_balance
        FROM accounts
        WHERE account_id = NEW.AccountID;

        -- Ensure the withdrawal does not exceed the balance
        IF current_balance + NEW.Amount < 0 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Insufficient funds for withdrawal';
        END IF;
    END IF;

    -- Ensure deposits are positive
    IF NEW.Amount <= 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Deposit amount must be positive';
    END IF;
END;

________________________________________________________________________________________________________________________________________________


Exercise 6: Cursors


Scenario 1: Generate monthly statements for all customers.
Question: Write a PL/SQL block using an explicit cursor GenerateMonthlyStatements that retrieves all transactions for the current month and prints a statement for each customer.

Generate Monthly Statements

DECLARE
    CURSOR cur_transactions IS
        SELECT customer_id, account_id, transaction_id, amount, transaction_date
        FROM transactions
        WHERE EXTRACT(MONTH FROM transaction_date) = EXTRACT(MONTH FROM SYSDATE)
          AND EXTRACT(YEAR FROM transaction_date) = EXTRACT(YEAR FROM SYSDATE);
    
    v_customer_id      transactions.customer_id%TYPE;
    v_account_id       transactions.account_id%TYPE;
    v_transaction_id   transactions.transaction_id%TYPE;
    v_amount           transactions.amount%TYPE;
    v_transaction_date transactions.transaction_date%TYPE;
    
BEGIN
    OPEN cur_transactions;
    
    LOOP
        FETCH cur_transactions INTO v_customer_id, v_account_id, v_transaction_id, v_amount, v_transaction_date;
        EXIT WHEN cur_transactions%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE('Customer ID: ' || v_customer_id);
        DBMS_OUTPUT.PUT_LINE('Account ID: ' || v_account_id);
        DBMS_OUTPUT.PUT_LINE('Transaction ID: ' || v_transaction_id);
        DBMS_OUTPUT.PUT_LINE('Amount: ' || v_amount);
        DBMS_OUTPUT.PUT_LINE('Transaction Date: ' || v_transaction_date);
        DBMS_OUTPUT.PUT_LINE('-----------------------------');
    END LOOP;
    
    CLOSE cur_transactions;
END;
/

Scenario 2: Apply annual fee to all accounts.
Question: Write a PL/SQL block using an explicit cursor ApplyAnnualFee that deducts an annual maintenance fee from the balance of all accounts.
Scenario 3: Update the interest rate for all loans based on a new policy.

Apply Annual Fee

DECLARE
    CURSOR cur_accounts IS
        SELECT account_id, balance
        FROM accounts;
    
    v_account_id accounts.account_id%TYPE;
    v_balance    accounts.balance%TYPE;
    
    annual_fee CONSTANT DECIMAL(10, 2) := 50.00;
    
BEGIN
    OPEN cur_accounts;
    
    LOOP
        FETCH cur_accounts INTO v_account_id, v_balance;
        EXIT WHEN cur_accounts%NOTFOUND;
        
        IF v_balance >= annual_fee THEN
            UPDATE accounts
            SET balance = balance - annual_fee
            WHERE account_id = v_account_id;
        END IF;
    END LOOP;
    
    CLOSE cur_accounts;
    
    COMMIT;
END;
/


Scenario 3: Update the interest rate for all loans based on a new policy.
Question: Write a PL/SQL block using an explicit cursor UpdateLoanInterestRates that fetches all loans and updates their interest rates based on the new policy.

Update Loan Interest Rates

DECLARE
    CURSOR cur_loans IS
        SELECT loan_id, interest_rate
        FROM loans;
    
    v_loan_id       loans.loan_id%TYPE;
    v_interest_rate loans.interest_rate%TYPE;
    
    new_interest_rate DECIMAL(5, 2);
    
BEGIN
    OPEN cur_loans;
    
    LOOP
        FETCH cur_loans INTO v_loan_id, v_interest_rate;
        EXIT WHEN cur_loans%NOTFOUND;
        
        -- Implement the logic to determine the new interest rate based on policy
        -- Example: new policy to reduce interest rate by 0.5%
        new_interest_rate := v_interest_rate - 0.5;
        
        UPDATE loans
        SET interest_rate = new_interest_rate
        WHERE loan_id = v_loan_id;
    END LOOP;
    
    CLOSE cur_loans;
    
    COMMIT;
END;
/

________________________________________________________________________________________________________________________________________________

Exercise 7: Packages


Scenario 1: Group all customer-related procedures and functions into a package.
Question: Create a package CustomerManagement with procedures for adding a new customer, updating customer details, and a function to get customer balance.

Customer Management Package

-- Package Specification
CREATE OR REPLACE PACKAGE CustomerManagement AS
    PROCEDURE AddNewCustomer(p_customer_id IN NUMBER, p_name IN VARCHAR2, p_dob IN DATE, p_address IN VARCHAR2);
    PROCEDURE UpdateCustomerDetails(p_customer_id IN NUMBER, p_name IN VARCHAR2, p_dob IN DATE, p_address IN VARCHAR2);
    FUNCTION GetCustomerBalance(p_customer_id IN NUMBER) RETURN NUMBER;
END CustomerManagement;
/

-- Package Body
CREATE OR REPLACE PACKAGE BODY CustomerManagement AS
    PROCEDURE AddNewCustomer(p_customer_id IN NUMBER, p_name IN VARCHAR2, p_dob IN DATE, p_address IN VARCHAR2) IS
    BEGIN
        INSERT INTO customers (customer_id, name, dob, address)
        VALUES (p_customer_id, p_name, p_dob, p_address);
    END AddNewCustomer;

    PROCEDURE UpdateCustomerDetails(p_customer_id IN NUMBER, p_name IN VARCHAR2, p_dob IN DATE, p_address IN VARCHAR2) IS
    BEGIN
        UPDATE customers
        SET name = p_name, dob = p_dob, address = p_address
        WHERE customer_id = p_customer_id;
    END UpdateCustomerDetails;

    FUNCTION GetCustomerBalance(p_customer_id IN NUMBER) RETURN NUMBER IS
        v_balance NUMBER;
    BEGIN
        SELECT SUM(balance)
        INTO v_balance
        FROM accounts
        WHERE customer_id = p_customer_id;

        RETURN v_balance;
    END GetCustomerBalance;
END CustomerManagement;
/

Scenario 2: Create a package to manage employee data.
Question: Write a package EmployeeManagement with procedures to hire new employees, update employee details, and a function to calculate annual salary.

Employee Management Package

-- Package Specification
CREATE OR REPLACE PACKAGE EmployeeManagement AS
    PROCEDURE HireNewEmployee(p_employee_id IN NUMBER, p_name IN VARCHAR2, p_department_id IN NUMBER, p_salary IN NUMBER);
    PROCEDURE UpdateEmployeeDetails(p_employee_id IN NUMBER, p_name IN VARCHAR2, p_department_id IN NUMBER, p_salary IN NUMBER);
    FUNCTION CalculateAnnualSalary(p_employee_id IN NUMBER) RETURN NUMBER;
END EmployeeManagement;
/

-- Package Body
CREATE OR REPLACE PACKAGE BODY EmployeeManagement AS
    PROCEDURE HireNewEmployee(p_employee_id IN NUMBER, p_name IN VARCHAR2, p_department_id IN NUMBER, p_salary IN NUMBER) IS
    BEGIN
        INSERT INTO employees (employee_id, name, department_id, salary)
        VALUES (p_employee_id, p_name, p_department_id, p_salary);
    END HireNewEmployee;

    PROCEDURE UpdateEmployeeDetails(p_employee_id IN NUMBER, p_name IN VARCHAR2, p_department_id IN NUMBER, p_salary IN NUMBER) IS
    BEGIN
        UPDATE employees
        SET name = p_name, department_id = p_department_id, salary = p_salary
        WHERE employee_id = p_employee_id;
    END UpdateEmployeeDetails;

    FUNCTION CalculateAnnualSalary(p_employee_id IN NUMBER) RETURN NUMBER IS
        v_salary NUMBER;
    BEGIN
        SELECT salary * 12
        INTO v_salary
        FROM employees
        WHERE employee_id = p_employee_id;

        RETURN v_salary;
    END CalculateAnnualSalary;
END EmployeeManagement;
/

Scenario 3: Group all account-related operations into a package.
Question: Create a package AccountOperations with procedures for opening a new account, closing an account, and a function to get the total balance of a customer across all accounts.


Account Operations Package

-- Package Specification
CREATE OR REPLACE PACKAGE AccountOperations AS
    PROCEDURE OpenNewAccount(p_account_id IN NUMBER, p_customer_id IN NUMBER, p_balance IN NUMBER);
    PROCEDURE CloseAccount(p_account_id IN NUMBER);
    FUNCTION GetTotalBalance(p_customer_id IN NUMBER) RETURN NUMBER;
END AccountOperations;
/

-- Package Body
CREATE OR REPLACE PACKAGE BODY AccountOperations AS
    PROCEDURE OpenNewAccount(p_account_id IN NUMBER, p_customer_id IN NUMBER, p_balance IN NUMBER) IS
    BEGIN
        INSERT INTO accounts (account_id, customer_id, balance)
        VALUES (p_account_id, p_customer_id, p_balance);
    END OpenNewAccount;

    PROCEDURE CloseAccount(p_account_id IN NUMBER) IS
    BEGIN
        DELETE FROM accounts
        WHERE account_id = p_account_id;
    END CloseAccount;

    FUNCTION GetTotalBalance(p_customer_id IN NUMBER) RETURN NUMBER IS
        v_total_balance NUMBER;
    BEGIN
        SELECT SUM(balance)
        INTO v_total_balance
        FROM accounts
        WHERE customer_id = p_customer_id;

        RETURN v_total_balance;
    END GetTotalBalance;
END AccountOperations;
/

________________________________________________________________________________________________________________________________________________


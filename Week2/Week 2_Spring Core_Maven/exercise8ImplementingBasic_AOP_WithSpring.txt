### Exercise 8: Implementing Basic AOP with Spring

#### Scenario:
The library management application requires basic AOP functionality to separate cross-cutting concerns like logging and transaction management.

#### Steps:

1. **Define an Aspect:**
    - Create a package `com.library.aspect` and add a class `LoggingAspect`.

2

. **Create Advice Methods:**
    - Define advice methods in `LoggingAspect` for logging before and after method execution.
    
    ```java
    @Aspect
    public class LoggingAspect {

        @Before("execution(* com.library.service.*.*(..))")
        public void logBefore() {
            System.out.println("Method execution started");
        }

        @After("execution(* com.library.service.*.*(..))")
        public void logAfter() {
            System.out.println("Method execution ended");
        }
    }
    ```

3. **Configure the Aspect:**
    - Update `applicationContext.xml` to register the aspect and enable AspectJ auto-proxying.
    
    ```xml
    <aop:aspectj-autoproxy/>
    <bean id="loggingAspect" class="com.library.aspect.LoggingAspect"/>
    ```

4. **Test the Aspect:**
    - Run the `LibraryManagementApplication` main class to verify the AOP functionality.
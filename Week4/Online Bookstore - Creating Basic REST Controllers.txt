Exercise 2: Online Bookstore - Creating Basic REST Controllers:-

1.Create the Book Entity:

@Data
   @NoArgsConstructor
   @AllArgsConstructor
   @Entity
   public class Book {
       @Id
       @GeneratedValue(strategy = GenerationType.IDENTITY)
       private Long id;
       private String title;
       private String author;
       private Double price;
       private String isbn;
   }

2.Create the Book Repository:

 public interface BookRepository extends JpaRepository<Book, Long> 
{

 }

3.Create the Book Controller:

   @RestController
   @RequestMapping("/books")
   public class BookController {
       @Autowired
       private BookRepository bookRepository;

       @GetMapping
       public List<Book> getAllBooks() {
           return bookRepository.findAll();
       }

       @GetMapping("/{id}")
       public Book getBookById(@PathVariable Long id) {
           return bookRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Book not found"));
       }

       @PostMapping
       public Book createBook(@RequestBody Book book) {
           return bookRepository.save(book);
       }

       @PutMapping("/{id}")
       public Book updateBook(@PathVariable Long id, @RequestBody Book bookDetails) {
           Book book = bookRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Book not found"));
           book.setTitle(bookDetails.getTitle());
           book.setAuthor(bookDetails.getAuthor());
           book.setPrice(bookDetails.getPrice());
           book.setIsbn(bookDetails.getIsbn());
           return bookRepository.save(book);
       }

       @DeleteMapping("/{id}")
       public ResponseEntity<?> deleteBook(@PathVariable Long id) {
           Book book = bookRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Book not found"));
           bookRepository.delete(book);
           return ResponseEntity.ok().build();
       }
   }
